{"version":3,"sources":["Card.js","CardList.js","SearchRobos.js","Scroll.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","email","name","className","src","alt","CardList","robots","map","robot","index","key","SearchRobos","searchRobo","type","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","onSearch","event","searchField","target","value","console","log","length","fetch","then","response","json","users","filteredRobos","filter","robo","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"mNAaeA,EAVF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACtB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,4BAAKH,GACL,2BAAID,KCeDK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAOC,GACf,OACI,kBAAC,EAAD,CACIC,IAAG,iBAAYD,GACfT,MAAOQ,EAAMR,MACbC,KAAMO,EAAMP,KACZF,GAAIS,EAAMT,UCJvBY,EARK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAClB,OACI,yBAAKV,UAAU,uDACX,2BAAOW,KAAK,SAASC,SAAUF,MCM5BG,EATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCiBJC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,4DAEJG,KAAKX,MAAMK,a,GAhBCQ,IAAMC,WCmDlBC,E,kDA5Cb,aAAc,IAAD,8BACX,gBAcFC,SAAW,SAACC,GACV,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SAdzC,EAAKb,MAAQ,CACXjB,OAAQ,GACR4B,YAAa,IAJJ,E,gEAQQ,IAAD,OAClBG,QAAQC,IAAIX,KAAKJ,MAAMjB,OAAOiC,QAC9BC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKhB,SAAS,CAACtB,OAASsC,S,+BAOlC,IAAD,EACyBjB,KAAKJ,MAA5BjB,EADF,EACEA,OAAQ4B,EADV,EACUA,YAChBG,QAAQC,IAAIhC,EAAOiC,QACnB,IAAMM,EAAgBvC,EAAOwC,QAAO,SAAAC,GACnC,OAAOA,EAAK9C,KAAK+C,cAAcC,SAASf,EAAYc,kBAGrD,OAAI1C,EAAOiC,OAIP,yBAAKrC,UAAU,MACb,wBAAIA,UAAU,MAAd,uBACA,kBAAC,EAAD,CAAaU,WAAYe,KAAKK,WAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAW1B,OAAQuC,OARnB,2C,GA5BIhB,IAAMC,WCGJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLY,QAAQZ,MAAMA,EAAMwC,a","file":"static/js/main.9294700d.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({id, email, name}) => {\n    return(\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\n\nimport Card from './Card';\n\nconst CardList = ( {robots} ) => {\n\n    return(\n        <div>\n            {\n                robots.map((robot, index)=> {\n                    return (\n                        <Card \n                            key={`myRobot${index}`} \n                            email={robot.email}  \n                            name={robot.name} \n                            id={robot.id} />\n                    );\n                })\n            }\n        </div> \n    );\n}\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchRobos = ({searchRobo}) => {\n    return(\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <input type=\"search\" onChange={searchRobo}/>\n        </div>\n    )\n}\n\nexport default SearchRobos;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return(\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}>\n            {props.children}\n        </div>\n        \n    )\n}\n\nexport default Scroll;","import React from 'react';\n\n\nclass ErrorBoundry extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true});\n    }\n    \n    render(){\n        if(this.state.hasError){\n            return <h1>Ooops. Something went wrong!</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\n\nimport CardList from './CardList';\nimport SearchRobos from './SearchRobos';\n//import { robots } from './robots';\nimport Scroll from './Scroll'\nimport ErrorBoundry from './ErrorBoundry'\n\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      robots: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.state.robots.length);\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({robots : users}));\n  }\n\n  onSearch = (event) => {\n    this.setState({searchField: event.target.value});\n  }\n\n  render(){\n    const { robots, searchField} = this.state;\n    console.log(robots.length);\n    const filteredRobos = robots.filter(robo=> {\n     return robo.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    \n    if(!robots.length){\n       return <h1>Loading</h1>\n    } else{\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f2\">My Robo Friends App</h1>\n          <SearchRobos searchRobo={this.onSearch}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList  robots={filteredRobos}/>\n            </ErrorBoundry>\n          </Scroll> \n        </div>\n      );\n    }  \n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nimport 'tachyons';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n serviceWorker.unregister();\n"],"sourceRoot":""}